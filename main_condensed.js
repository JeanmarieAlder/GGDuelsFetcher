const selfId = ""
const lastId = ""
async function main(e, t) { function n(e, t) { return new Promise(n => { setTimeout(() => { n(e()) }, t) }) } function o(e) { return [...e.matchAll(/\\"gameId\\":\\"([\w\d\-]*)\\",\\"gameMode\\":\\"Duels\\"/g)].map(e => e[1]) } function a(t) { return btoa(`{"HashKey":{"S":"${e + "_activity"}"},"Created":{"S":"${t}"}}`) } async function r(e = 1, t = "", r = "") { let p = r, s = []; for (let l = 0; l < e; l++) { console.log("Fetching page", l + 1); let i = "https://www.geoguessr.com/api/v4/feed/private"; "" !== p && (i += "?paginationToken=" + p); let u = await (await fetch(i)).json(); if (0 === u.entries.length) { console.log("All data fetched."); break } if (s.push(...o(JSON.stringify(u))), s.includes(t)) break; p = a(u.entries[u.entries.length - 1].time.substring(0, 23) + "Z"), await n(() => console.log("Done"), 500) } let d = s.filter((e, t, n) => n.indexOf(e) === t); return d.includes(t) ? d.slice(0, d.indexOf(t)) : d } let p = await r(1e3, t), s = {}; async function l(t) { let n = {}; n.id = t.gameId, n.rounds = t.currentRoundNumber, n.startDate = new Date(t.rounds[0].startTime).toLocaleString("en-US"), n.endDate = new Date(t.rounds[n.rounds - 1].endTime).toLocaleString("en-US"), n.mode = t.options.competitiveGameMode; for (let o = 0; o < 2; o++) { let a = t.teams[o]; if (a.players[0].playerId === e) { if (n.selfHp = a.health, null === a.players[0].progressChange) n.befElo = a.players[0].rating, n.aftElo = n.befElo; else { let r = a.players[0].progressChange.competitiveProgress; null === r ? (n.befElo = a.players[0].rating, n.aftElo = n.befElo) : (n.befElo = r.ratingBefore, n.aftElo = r.ratingAfter) } [n.selfDist, n.selfTtg, n.selfCountries] = i(a.players[0].guesses, t.rounds, a.roundResults, t.teams[1 - o].roundResults) } else { if (n.oppId = a.players[0].playerId, n.oppHp = a.health, n.oppElo = a.players[0].rating, [n.oppDist, n.oppTtg, _nil] = i(a.players[0].guesses, t.rounds), !s[n.oppId]) { let p = `https://www.geoguessr.com/api/v3/users/${n.oppId}`; try { let l = await fetch(p, { credentials: "include" }), u = await l.json(); s[n.oppId] = u } catch (d) { if (d.response.status >= 400) { n.oppName = "Deleted User", n.oppCountry = "", n.oppBanned = !0, n.oppBlueCheck = !1, n.oppCreator = !1; continue } } } let c = s[n.oppId]; n.oppName = c.nick, n.oppCountry = c.countryCode, n.oppBanned = c.isBanned, n.oppBluecheck = (2 & c.flair) != 0, n.oppCreator = c.isCreator } } return n } function i(e, t, n = null, o = null) { let a = 0, r = 0, p = 0, s = {}; for (let l of e) { let i = l.roundNumber - 1, u = (new Date(l.created) - new Date(t[i].startTime)) / 1e3; if (p++, a += l.distance, r += u, !n) continue; let d = t[i].panorama?.countryCode; "" !== d && (d in s || (s[d] = [0, 0, 0, 0, 0, 0]), s[d][0]++, s[d][1] += l.distance, s[d][2] += u, n[i].healthAfter >= n[i].healthBefore ? s[d][3]++ : s[d][4] += o[i].score - n[i].score, s[d][5] += n[i].score - o[i].score) } return 0 === p ? ["", ""] : [a / p, r / p, Object.entries(s).map(e => e[0] + "," + e[1].join(",")).join(";")] } async function u(e) { let t = [], o = 0; for (let a of e) { console.log(`Fetching duel #${o++} / ${e.length}`); let r = await fetch(`https://game-server.geoguessr.com/api/duels/${a}`, { credentials: "include" }); r = await r.json(); let p = await l(r); t.push(p), await n(() => null, 150) } return t } let d = { id: "ID", rounds: "# Rounds", startDate: "Start Date", endDate: "End Date", selfHp: "My Health", befElo: "Start ELO", aftElo: "End ELO", selfDist: "Avg Distance", selfTtg: "Avg TTG", oppId: "Opp ID", oppHp: "Opp Health", oppElo: "Opp ELO", oppDist: "Opp Distance", oppTtg: "Opp TTG", selfCountries: "Self Countries", mode: "Game Mode", oppName: "Opp Name", oppCountry: "Opp Country", oppBanned: "Opp Banned", oppBluecheck: "Opp Bluecheck", oppCreator: "Opp Creator" }, c = await u(p), f = function e(t, n = "	", o = d) { let a = ""; for (let r of t = [...t]) { for (let p in o) a += r[p] + n; a += "\n" } return a }(c); return f }
await main(selfId, lastId)
